import "./ChivoMono-VariableFont_wght.ttf";
import { Button, ComboBox, TextEdit, ListView } from "std-widgets.slint";
import { MenuItem } from "./components/menu-item.slint";
import { Switch, Status } from "./components/indicators.slint";
import { SingleForm, ExposeForm, Submit, Login } from "./components/forms.slint";

struct Port { name: string, id: string }

component LocalMidi inherits VerticalLayout {
    spacing: 10px;

    MenuItem{
        text: "send dummy cc";
        SingleForm {
            clicked(cc) => {AppState.send_dummy_cc(cc)}
        }
    }
    HorizontalLayout{
        alignment: start;
        MenuItem{
            width: parent.width;
            text: "select midi port";
            port-selector := ComboBox {
                width: parent.width - 260px;
                model: AppState.midi-ports;
                selected => {AppState.choose_midi_port(port-selector.current_index)}
                current-value: "";
            }
            Submit {
                text: "â™º";
                clicked => {AppState.refresh_ports();}
                width: 40px;
            }
        }
    }
}

export global AppState {
    callback hide_device(string);
    callback expose_device(string, string, string);
    callback choose_midi_port(int);
    callback send_dummy_cc(string);
    callback copy_to_clipboard();
    callback clear_all();
    callback disconnect();
    callback paste();
    callback login(string, string);
    callback refresh_ports();
    callback passthrough_click();
    in property <[string]> midi-ports;
    in property <bool> connected_to_server: false;
    in property <bool> logged_in: false;
    in property <bool> passthrough: true;
    in property <string> server_name;
}

export component AppWindow inherits Window {
    property <int> menu_buttons: 4;
    in property <[string]> ui_types;
    in property <[string]> exposed_devices;
    property <int> default-padding: 10;

    title: "midiserv";
    background: rgb(200,200,200);
    min-height: (AppState.logged_in ? 500 : 310) * 1px;
    max-height: (AppState.logged_in ? 1000 : 310) * 1px;
    min-width: 500px;
    max-width: 500px;
    preferred-width: 500px;
    default-font-family: "Chivo Mono";
    default-font-size: 12px;

    VerticalLayout {
        alignment: start;
        padding: default-padding * 1px;

        Text {
            text: "midiserv";
            font-size: 30px;
            color:black;
        }

    Rectangle {
        height: 30px;
    }
    if !AppState.logged_in : VerticalLayout{
        spacing: 10px;
        LocalMidi{}
        Login{connect-attempt(url, pass) => {AppState.login(url, pass)}}
        }

    if AppState.logged_in : VerticalLayout {
            VerticalLayout {
                spacing: 10px;

                MenuItem{
                    text: "connection status";
                    Status{
                        status: AppState.connected_to_server;
                        name: AppState.server_name;
                    }
                }
                MenuItem{
                    text: "passthrough allowed";
                    Switch{
                        isOn: AppState.passthrough;
                        clicked => { AppState.passthrough_click(); }
                    }
                }
                LocalMidi{}
                MenuItem{
                    text: "expose device";
                    ExposeForm{
                        ui_types: ui_types;
                        placeholders: ["cc#","type","desc"];
                        clicked(t1,t2,t3) =>
                            {AppState.expose_device(t1, t2, t3)}
                    }
                }

                HorizontalLayout{
                    property <int> color: 165;
                    alignment: center;
                    Path {
                        width: parent.width * 0.85;
                        commands: "M 0 0 H 100";
                        stroke: rgb(color,color,color);
                        stroke-width: 1px;
                    }
                }

                currently-exposed := VerticalLayout {
                    Text {text: "currently exposed";  horizontal-alignment: center;}
                    HorizontalLayout {
                        alignment: center;
                        ListView {
                            height: root.height - 360px;
                            width: root.width/2;
                            for device[index] in exposed_devices :
                                HorizontalLayout {
                                    padding: 1px;
                                    Submit {
                                        text: device;
                                        clicked => { AppState.hide_device(index) }
                                    }
                                }
                        }
                    }
                }
            }
            VerticalLayout {
            alignment: end;
                HorizontalLayout {
                    padding-top: 20px;
                    spacing: default-padding / 2 * 1px;
                    Submit{
                        text: "paste";
                        clicked => {AppState.paste();}
                        width: (parent.width - ((default-padding / 2 * 1px) * (menu-buttons - 1))) / menu-buttons;
                    }
                    Submit{
                        text: "clipobard ";
                        clicked => {AppState.copy_to_clipboard()}
                        width: (parent.width - ((default-padding / 2 * 1px) * (menu-buttons - 1))) / menu-buttons;
                    }
                    Submit{
                        text: "clear all";
                        background: rgb(248,168,168);
                        clicked => {AppState.clear_all()} width: (parent.width - ((default-padding / 2 * 1px) * (menu-buttons - 1))) / menu-buttons;
                    }
                    Submit{
                        text: "disconnect ";
                        background: rgb(248,168,168);
                        clicked => {AppState.disconnect()}
                        width: (parent.width - ((default-padding / 2 * 1px) * (menu-buttons - 1))) / menu-buttons;
                    }
                }
            }
        }
    }
}
